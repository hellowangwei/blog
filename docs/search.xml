<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[使用hexo+indego搭建静态博客]]></title>
    <url>%2Fblog%2F2017%2F06%2F15%2F%E4%BD%BF%E7%94%A8hexo-indego%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[前言Github 为广大开发者提供了一个非常好的平台，不仅是代码的开源，同时 Github 还提供了开发者可以在 Github 上建立自己的站点（GithubPage）的一个非常有意思的功能。这个功能的局限是只能创建静态的网站，那么我们可以使用一些工具来快速创建这一网站。本文旨在帮助刚接触 Github 新手，想利用 Github 来创建自己的站点、个人博客等。大神可以忽视(:з」∠)。 准备你需要在 Github 上创建一个属于自己的账户，然后新建一个仓库（new repository），并命名为 YourSiteName.github.io/com，此时 Github 会帮助你初始化一个静态网页，你可以根据自己的喜好选择一些模版（这都不是重点），接着尝试访问下你所建的站点，成功后就可以开始动工了。 关于 Hexo A fast, simple &amp; powerful blog framework 快速，简单而高效的静态博客框架 超快速度： Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。 支持 Markdown： Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。 一键部署： 只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。 丰富的插件： Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。 关于indego 正题上面是对搭建博客的一些技术了解，接下来进入正题。 Hexo 初始化博客框架1. 安装 HexoHexo 安装和搭建依赖 Nodejs 和 Git ，可自行下载。1$ npm install -g hexo-cli 2. 初始化框架123$ hexo init &lt;yourFolder&gt;$ cd &lt;yourFolder&gt;$ npm install 初始化完成大概的目录：12345678.├── _config.yml //网站的 配置 信息，您可以在此配置大部分的参数。├── package.json├── scaffolds //模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。├── source //资源文件夹是存放用户资源的地方。| ├── _drafts| └── _posts└── themes //主题 文件夹。Hexo 会根据主题来生成静态页面。 3. 新建文章（创建一个 Hello World）1$ hexo new &quot;Hello World&quot; 在 /source/_post 里添加 hello-world.md 文件，之后新建的文章都将存放在此目录下。 4. 生成网站1$ hexo generate 此时会将 /source 的 .md 文件生成到 /public 中，形成网站的静态文件。 5. 服务器1$ hexo server -p 3000 输入 http://localhost:3000 即可查看网站。 6. 部署网站1$ hexo deploy 部署网站之前需要生成静态文件，即可以用 $ hexo generate -d 直接生成并部署。此时需要在 _config.yml 中配置你所要部署的站点： 12345## Docs: http://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:YourRepository.git branch: master 7. 更多 官网 - [Hexo] 配置相关 - [Hexo | 配置] 更多的命令 - [Hexo | 指令] 那么到此为止网站的雏形算是完成了，接下来你就要自己去管理和完善个人网站了。 使用 indego 主题让站点更酷炫1. 主题安装12$ cd your-hexo-site$ git clone git@github.com:yscoder/hexo-theme-indigo.git themes/indigo 从indego的 Gihub 仓库中获取最新版本。 2. 切换主题执行 git branch 显示所有本地分支，如果只存在一个分支，可以执行下面的命令获取另一分支的主题。12345# 获取远程 card 分支，并切换$ git checkout -b card origin/card# 获取远程 master 分支，并切换$ git checkout -b master origin/master 此命令只需执行一次，之后使用 git checkout [branch] 命令在两个主题之间切换。 3. 依赖安装还是在 Hexo 根目录，如果以下插件已安装过，无需再次安装。 Less主题默认使用 less 作为 css 预处理工具。1$ npm install hexo-renderer-less --save Json-content用于生成静态站点数据，用作站内搜索的数据源。1$ npm install hexo-generator-json-content --save 4. 开启标签页1hexo new page tags 修改 hexo/source/tags/index.md 的元数据123layout: tagscomments: false--- 5. 开启分类页1hexo new page categories 修改 hexo/source/categories/index.md 的元数据123layout: categoriescomments: false--- 最后我的博客]]></content>
      <categories>
        <category>笔记随笔</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[使用 Git 管理项目 - reset 与 rebase]]></title>
    <url>%2Fblog%2F2017%2F06%2F15%2F%E4%BD%BF%E7%94%A8-Git-%E7%AE%A1%E7%90%86%E9%A1%B9%E7%9B%AE-reset-%E4%B8%8E-rebase%2F</url>
    <content type="text"><![CDATA[在日常管理项目的过程中，可能会遇到提交的 commit/merge 并不是想要的，或是操作失误提交了，那么此时我们需要把不想要的 commit/merge 取消掉，如果做到呢？Git 为我们提供了一个 reset command，很好地解决了这个问题。 reset1. 命令说明1$ git reset [--hard|soft|mixed|merge|keep] [&lt;commit&gt;|&lt;HEAD&gt;] 常用的是[--hard|soft|mixed]，本文主要使用--hard作为例子进行说明。 2. 本地仓库在本地仓库执行 $ git reset --hard HEAD^ 可以将本地的仓库回滚到上一次提交时的状态，HEAD^指的是上一次提交。 同时你也可以执行 $ git reset --hard fc232ae 将其回滚到 fc232ae commit 时的状态。 3. 远程仓库以上操作只会对本地仓库造成影响，而远程仓库的源码和 commit 信息并不会因此改变。那么此时我们需要另外一个 command 来改变远程仓库的状态。 注意，此时不要在上一步的操作之后执行$ git pull ，因为这个操作会使本地仓库的状态与远程同步。1$ git push origin [branch] -f 执行此命令后，Git 会将远程仓库的状态与本地仓库的保持一致，即回滚状态。 在更新代码时，难免一次到位，此时就会生成许许多多的 commit 。比如同一个文件，反复地修改代码，反复地提交，此时会有5，6个 commit 甚至更多，那么你会在提交 list 中看到一大串的 commit 记录，会觉得很是头疼，杂乱。此时我们需要把这些 commit 整合以下，合并到一个 commit 中，其他的 commit 都 squash 到第一 commit 中，那么就需要用到 rebase。 rebase1. 说明1$ git rebase -i [branch|&lt;commit&gt;] 你可以直接进入某个分支的 rebase 也可以进入某次 commit 的 rebase，如果你是项将某些 commit 合并，那么建议使用 $ git rebase -i &lt;commit&gt;。 此外 rebase 还提供三个操作命令，分别是 --continue、--absort 和 --skip，这三个命令的意思分别是“继续”、“退出”和“跳过”。 2. 查看记录1$ git log 执行此命令即可看到当前分支下所有的提交记录，然后根据个人需要复制其中的 commit 的 SHA 进行 rebase 操作。 3. rebase执行：1$ git rebase -i 9cbc329 然后就会看到：12345678910111213141516pick fb554f5 This is commit 1pick 2bd1903 This is commit 2pick d987ebf This is commit 3# Rebase 9cbc329..d987ebf onto 9cbc329## Commands:# p, pick = use commit# r, reword = use commit, but edit the commit message# e, edit = use commit, but stop for amending# s, squash = use commit, but meld into previous commit# f, fixup = like &quot;squash&quot;, but discard this commit&apos;s log message# x, exec = run command (the rest of the line) using shell## If you remove a line here THAT COMMIT WILL BE LOST.# However, if you remove everything, the rebase will be aborted.# 那么其中 pick fb554f5 This is commit 1我们可以把它分成三部分去解释： pick:：操作，即 rebase command fb554f5：commit shortID，提交的简写ID This is commit 1： commit message，提交时填写的提交信息 此时我们可以看到输出结果中所提供的一些操作方法，比如 pick、squash、edit 等。那么重要的是 pick 和 squash。 接着我们需要把 2bd1903 和 d987ebf 合并到 fb554f5 中，做如下操作（注意：此时是 VIM 的操作界面，熟悉 Linux 的同学可以无视，不熟悉的可以简略的指导）：12345678910111213141516pick fb554f5 This is commit 1squash 2bd1903 This is commit 2squash d987ebf This is commit 3# Rebase 9cbc329..d987ebf onto 9cbc329## Commands:# p, pick = use commit# r, reword = use commit, but edit the commit message# e, edit = use commit, but stop for amending# s, squash = use commit, but meld into previous commit# f, fixup = like &quot;squash&quot;, but discard this commit&apos;s log message# x, exec = run command (the rest of the line) using shell## If you remove a line here THAT COMMIT WILL BE LOST.# However, if you remove everything, the rebase will be aborted.# 在做完以上修改操作后输入 :x 保存文件并退出界面，然后就会看到：123456789101112$ git rebase -i 9cbc329rebase in progress; onto 9cbc329You are currently rebasing branch &apos;master&apos; on &apos;9cbc329&apos;.nothing to commit, working directory cleanThe previous cherry-pick is now empty, possibly due to conflict resolution.If you wish to commit it anyway, use: git commit --allow-emptyOtherwise, please use &apos;git reset&apos;Could not apply 9cbc329f722f8e531496da70ee3857b031574b6d... squash commit on rebase 此时用 $ git status 查看会看到：123456$ git statusrebase in progress; onto 9cbc329You are currently rebasing branch &apos;master&apos; on &apos;9cbc329&apos;. (all conflicts fixed: run &quot;git rebase --continue&quot;)nothing to commit, working directory clean 紧接着我们需要执行 $ git rebase --continue 操作：123456$ git rebase --continue[detached HEAD 2bd1903...d987ebf] squash commit on rebase Date: Tue Nov 3 10:09:43 2015 +0800 1 file changed, 149 insertions(+), 154 deletions(-) rewrite test.js (72%)Successfully rebased and updated refs/heads/master. 最后我们需要把修改合并好的 commit push 到远程仓库上：1$ git push origin [branch] -f 到此为止，整个 rebase 操作都已完成。你会看到类似：变成类似： 简略的指导在 VIM 的操作界面下，需要按 I/Insert 键进行插入修改文本操作，修改完文本之后需要按 Esc 键退出编辑状态，然后输入 :q 是离开，输入 :!q 是强制离开，输入 :x 是保存修改并离开。在 rebase 修改文本结束后需要输入 :x 进行保存。]]></content>
      <categories>
        <category>转载</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>项目管理</tag>
        <tag>reset</tag>
        <tag>rebase</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NPM一些常用命令]]></title>
    <url>%2Fblog%2F2017%2F06%2F15%2FNPM%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[关于NPMNPM的全称是Node Package Manager，是一个NodeJS包管理和分发工具，已经成为了非官方的发布Node模块（包）的标准。就目前而言，NPM的官网[1]拥有18万的packages。国内的镜像是淘宝所提供的CNPM[2]，与NPM相同，它会每隔10分钟就同步一次。 一些常用命令 npm -v: 查看npm安装的版本 npm init: 引导你创建一个package.json文件，包括名称、版本、作者这些信息等 npm install &lt;modulename&gt;: 安装模块 npm install &lt;modulename&gt; -g: 安装全局模块 npm install &lt;modulename&gt;@1.0.0: 安装指定版本的模块 npm install &lt;modulename&gt; -save: 安装模块并添加到package.json依赖中 npm uninstall &lt;modulename&gt;: 卸载模块 npm cache clean: 清除缓存 npm help: 查看帮助命令 npm ls: 查看当前目录安装的依赖 npm ls -g: 查看全局目录安装的依赖 npm view &lt;modulename&gt;: 查看包的package.json npm view &lt;modulename&gt; dependencies: 查看包的依赖关系 npm view &lt;modulename&gt; repository.url: 查看包的源文件地址 npm update &lt;modulename&gt;: 更新模块 npm remove &lt;modulename&gt;: 移除模块 题外话CNPM有时候会出现NPM无法使用的情况，此时可以尝试使用CNPM解决此问题。 淘宝NPM镜像这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。 使用1npm install -g cnpm --registry=https://registry.npm.taobao.org 安装模块与NPM类似，将npm install &lt;...&gt;改为cpm install &lt;...&gt; 更多更多命令参考文档[3]]]></content>
      <categories>
        <category>转载</category>
        <category>开发日常</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>module</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS 的使用中你可能不知道的 7 件事]]></title>
    <url>%2Fblog%2F2017%2F06%2F15%2FCSS-%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%AD%E4%BD%A0%E5%8F%AF%E8%83%BD%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84-7-%E4%BB%B6%E4%BA%8B%2F</url>
    <content type="text"><![CDATA[无论你信不信，JavaScript 和 CSS 已经开始重叠，并为 CSS 增加了更多的功能。当我在写 CSS 与 JavaScript 交互中你可能不知道的 5 种方式的时候，读者对于 CSS 与 JavaScript 已经重叠的事感到很惊讶。那么今天，我会着重为你介绍 7 个可以通过 CSS 完成的任务 —— 不使用 JavaScript 或图像处理！ CSS @supports每个优秀的前端工程师都会在使用某个特性前测试一下，确保是否在浏览器中可以使用。而这类测试通常是由 JavaScript 完成的，当然，也有很多人用 Modernizr（拥有很多很好功能的测试工具）来测试特性。那么现在有一个 CSS 新的 API 可以让你去做特性测试：@supports，下面的例子将简单地教你如何使用： 12345678910111213141516171819202122/* basic usage */@supports(prop:value) &#123; /* more styles */&#125;/* real usage */@supports (display: flex) &#123; div &#123; display: flex; &#125;&#125;/* testing prefixes too */@supports (display: -webkit-flex) or (display: -moz-flex) or (display: flex) &#123; section &#123; display: -webkit-flex; display: -moz-flex; display: flex; float: none; &#125;&#125; @supports 这个新的特性也有一个相对应的 JavaScript 方式，但这个特性还在实验阶段，希望我们可以很快用到！ CSS Filters你可以写一个服务去修改图片的颜色，同时还可以把它卖给 Facebook 获得大量的钱！当然，写一个图片过滤器功能只是一个简单化的实现，并非一门科学。在 Mozilla 的第一周，我写了一个小的应用（这让我赢了比赛，BTW…就说说而已），这个应用使用了一些 JS-base 的数学方法并使用 canvas 去做图片过滤器。这很麻烦，但是现在我们可以用 CSS 的特性去完成这一功能！ 123456789/* simple filter */.myElement &#123; -webkit-filter: blur(2px);&#125;/* advanced filter */.myElement &#123; -webkit-filter: blur(2px) grayscale (.5) opacity(0.8) hue-rotate(120deg);&#125; 这类的过滤功能只是创建一个图片的原型，并且不会保存和导出来完成过滤器的功能。这对于图片管理或想处理任何一张图片来说很方便！ Demo Pointer Events 和点击事件CSS 特性中的 pointer-events 提供了一个方法，能使一个元素 disable，即在用户点击某个元素时，不触发它在 JavaScript 中写的点击事件： 12/* do nothing when clicked or activated */.disabled &#123; pointer-events: none; &#125; 1234/* this will _not_ fire because of the pointer-events: none application */document.getElementById("disabled-element").addEventListener("click", function(e) &#123; alert("Clicked!");&#125;); 在上述的例子中，由于 pointer-events 的值是 none，而使点击事件不被触发。大有用处的是，让你不必到处去检查类名或属性，来确认哪一个是 disabled 的了。 Demo Slide Down &amp; Slide UpCSS 使我们能够创建转换和动画，但通常我们需要一个 JavaScript 库帮助我们实现。例如一个比较流行的动画效果 slide up 和 silde down，大概很多人都不知道这个可以只用 CSS 实现吧！ 1234567891011121314/* slider in open state */.slider &#123; overflow-y: hidden; max-height: 500px; /* approximate max height */ transition-property: all; transition-duration: .5s; transition-timing-function: cubic-bezier(0, 1, 0.5, 1);&#125;/* close it with the "closed" class */.slider.closed &#123; max-height: 0;&#125; 很聪明地使用了 max-height 来控制元素的展开和收缩。 Demo CSS Counters我们不禁地问，“counter” 在网上意味着什么呢？但是 CSS Counters 就是另外一回事了。这个特性可以把一个 counter 加到元素中，通过 :before 或 :after ： 1234567891011121314/* initialize the counter */ol.slides &#123; counter-reset: slideNum;&#125;/* increment the counter */ol.slides &gt; li &#123; counter-increment: slideNum;&#125;/* display the counter value */ol.slides li:after &#123; content: "[" counter(slideNum) "]";&#125; 通常这个会在一些模块或是列表中用到。 Demo Unicode CSS Classes有大量的文章说明，去教你如何对 CSS 的类命名。但你应该不知道会有这样的文档，去教你用特殊字符命名你的 css 类： 123456789.ಠ_ಠ &#123; border: 1px solid #f00; background: pink;&#125;.❤ &#123; background: lightgreen; border: 1px solid green;&#125; 但请不要这么使用。 Demo CSS CirclesCSS 中的圆形 与 CSS 中的三角形一样。通过使用 border-radius 就能创建一个完美的圆形！ 123456.circle &#123; border-radius: 50%; width: 200px; height: 200px; /* width and height can be anything, as long as they're equal */&#125; 你也可以给圆形添加一些渐变效果，甚至可以添加动画。CSS 拥有更多对于图形统一的 API，当然现在你可以使用 hack 创建一个圆形。 Demo 就是这些：你可能不知道的 7 个关于 CSS 的事，一部分是临界的情况，其他一部分还是非常实用的。那么就大胆地去用它们吧！ 原文链接]]></content>
      <categories>
        <category>转载</category>
        <category>好文分享</category>
      </categories>
      <tags>
        <tag>译文</tag>
        <tag>css</tag>
        <tag>features</tag>
        <tag>front-end</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[生成SSH keys]]></title>
    <url>%2Fblog%2F2017%2F06%2F15%2F%E7%94%9F%E6%88%90SSH-keys%2F</url>
    <content type="text"><![CDATA[首先确认自己的系统中是否已经拥有密钥。在默认情况下SSH的密钥存储在其~/.ssh目录下。可以使用以下命令进入目录并列出内容：1234$ cd ~/.ssh$ lsid_rsa id_rsa.pub known_hosts 其中id_rsa和id_rsa.pub就是存储密钥的文件，带有.pub后缀的是公钥，另外一个则是私钥。如果存在这些文件，则可以直接用$ cat id_rsa.pub来读取密钥内容。如果找不到这样的文件（或者不存在~/.ssh目录），则可以通过$ ssh-keygen来创建它们。1234567891011$ ssh-keygen -t rsa -C `you@email.com`Generating public/private rsa key pair.Enter file in which to save the key (/home/schacon/.ssh/id_rsa):Created directory &apos;/home/schacon/.ssh&apos;.Enter passphrase (empty for no passphrase):Enter same passphrase again:Your identification has been saved in /home/schacon/.ssh/id_rsa.Your public key has been saved in /home/schacon/.ssh/id_rsa.pub.The key fingerprint is:d0:82:24:8e:d7:f1:bb:9b:33:53:96:93:49:da:9b:e3 you@email.com 首先 $ ssh-keygen会确认密钥的存储位置（默认是.ssh/id_rsa），然后它会要求你输入两次密钥口令。如果你不想在使用密钥时输入口令，将其留空即可（为了方便以后操作，建议不设置密码）。 在完成上述操作之后即可获得SSH key，获得的公钥大概是这样的：12345678$ cat id_rsa.pubssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAmzM2RosSFanpxK+d3Eagt3Wicef9QbgH1x4yH3MFg2+6vIuFXchl+L3gMZabWH3BzKpBwoJICg8q9k4N8nOf5LNPtIp74hnEj/1b9Nh7OLrri82Ao6FYEdkC0NVsfhKlqha10MQrYxctimabtuKZdoUvv0knSawwvql2mvCIDra2D2350ICycZi0Fg1QULF3QdDF8Emtnvso1a5a9jgzf3tyHX6+r7lGnA+Ifzr8bxC4sqZ+aN0R7dn4uqQETF7l+n16dd370Efvbvj8CabZqVs7r5j/fdltcmSrH3i97Yfq0XsM0CIxltOIb8+MhkRzHAXdjWY51LyfyHtyysbgHw==you@email.com 关于在多种操作系统中生成 SSH 密钥的更深入教程，请参阅 GitHub 的 SSH 密钥指南：https://help.github.com/articles/generating-ssh-keys]]></content>
      <categories>
        <category>转载</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>SSH</tag>
        <tag>加密</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[对于 Web 设计师和开发者非常有用的 25 个 Chrome 扩展应用]]></title>
    <url>%2Fblog%2F2017%2F06%2F15%2F%E5%AF%B9%E4%BA%8E-Web-%E8%AE%BE%E8%AE%A1%E5%B8%88%E5%92%8C%E5%BC%80%E5%8F%91%E8%80%85%E9%9D%9E%E5%B8%B8%E6%9C%89%E7%94%A8%E7%9A%84-25-%E4%B8%AA-Chrome-%E6%89%A9%E5%B1%95%E5%BA%94%E7%94%A8%2F</url>
    <content type="text"><![CDATA[尽管 Chrome 的开发者工具给你足够多的实用工具来覆盖你的设计和开发需求，但也可以通过添加免费的扩展应用去进一步扩展浏览器的功能。根据你的需要，并选择完美的扩展，你可以轻松地创建一个个性化的开发环境，这会大大提高你的开发效率。 要介绍的 25 个 Chrome 扩展应该我们为你选择分为以下几类：前端扩展，在线编辑，验证器与性能相关，测量扩展应用，颜色工具，字体测试工具和 很有用的实用性扩展应用。 前端扩展SnappySnippetSnappySnippet 把 CSS 和 HTML 从 DOM 树里提取出来，然后发送到 CodePen，jsFiddle 或 JS Bin 上。 MagiCSSMagiCSS 一个拥有内置编辑器的在线 CSS 编辑扩展应用，具有美化和减小 CSS 的功能。同时还允许创建 Github Gist。 CSS DigCSS Dig 能够在大多数的网站上找到和组织样式表和样式块，给你一个简单的方法来分析和计划重构的代码。 CSSViewerCSSViewer 能集成很多工具和扩展程序去执行一个简单的任务。这使得它们更好地发挥功能。但没有 Chrome 扩展应用集合能在不集成的情况下可以完成这种功能。用法很简单，你只需点击工具栏的图标，然后将鼠标移到你想审查的元素上就可以了。 CSS-ShackCSS-Shack 帮助你创建图层样式（就像你用如 PS 一样），并能生成一个 CSS 文件。 CSS3 GeneratorCSS3 Generator 如名，可以帮助你生成 CSS3 代码。 CSS Shapes EditorCSS Shapes Editor 在线编辑 CSS 形状的值。 在线编辑WordPress Style EditorWordPress Style Editor 支持在线审查和编辑你的 WordPress 的样式。 PageEditPageEdit 能把 Chrome 变成所见即所得的编辑器，你可以用它编辑任何网页。 验证器与性能相关PerfmapPerfmap 它用 Resource Timing API 来创建一个网站的前端的性能的热图检查的定时器，使得可以在浏览器中查看加载的资源。 ValidityValidity 帮助你验证任何一个网页。可以在 console 页查看错误的数量和详情。 Web Developer ChecklistWeb Developer Checklist 必备的扩展应用，可以查看任何一个网页的报错和反常的问题。 Bootlint This PageBootlint This Page 在 Chrome 浏览器上显示一个按钮，帮助你查看任何一个基于 BootStrap 的网页的报错。可以在 console 页查看。 Check My LinksCheck My Links 扫描网页，并把链接以高亮显示，有效为绿色，无效为红色。没人会喜欢无效的链接！ 测量扩展应用Page RulerPage Ruler 能够在任何网上形成一个画尺，并显示元素的 width，height 和 position。 DimensionsDimensions 简单且使用的工具，为你测量屏幕宽度和高度。 颜色工具ColorZillaColorZilla 起源于 Firefox，但它为 Chrome 增加了多种颜色工具，像吸管，颜色选择器，调色板查看器和梯度生成器。 Color TabColor Tab 在你每次打开一个新标签时，会给你一个美丽的新配色方案。 字体测试工具Fontface NinjaFontface Ninja 可以识别任何网页的字体，同时给出它的 size 和 line-spacing。帮助你测试和探索新的字体。 Font PlaygroundFont Playground 在任何网页上预览 Google 成千上万的字体。 TypeWonderTypeWonder 允许你在任何网站测试 web 字体。输入站点 URL 就可以立马预览字体。 很有用的实用性扩展应用Responsive Web Design TesterResponsive Web Design Tester 是一个简单的工具，来帮助快速、轻松地测试网站在大多数流行的移动设备上的响应。 45to7545to75 为保证在所有大小设备上，你的文字是可读的。它可以帮你把句子规定在 45 到 75 个字符之间，从而优化句子长度。 PerfectPixelPerfectPixel 在开发 HTML 时，它会把半透明图像叠加在顶部，允许你在每个像素间进行比较。 ZenHubZenHub 为 Github 项目管理应用。有节省时间的特性，如 drap-drop 任务板和 to-do 列表，帮助你提升 Github 的生产效率。 Instant WireframeInstant Wireframe 谁不喜欢漂亮的线框呢？它给为任何一个网页添加线框，同时本地的也可以。 Minimalist Markdown EditorMinimalist Markdown Editor 同步预览 Markdown。可以快速地帮 Markdown 转化成 HTML。 fb-flofb-flo 由 Facebook 开发，同时也是 Chrome 的扩展应用。使你能够在线编辑 JS，CSS，images 或任何静态资源。 Web DeveloperWeb Developer 如果你现在还没用这个应用，赶紧吧。这是迄今为止最受欢迎的 Chrome 和 Firefox 开发人员扩展应用。它添加了一个超级有用工具到浏览器，每个网页设计师和开发人员，还有你可能甚至不知道你需要的都会需要。 MySQL AdminMySQL Admin 为你更好地，更简单地管理 MySQL 数据库。 完毕！想要获取更多的 Chrome 扩展应用，请看 DevTools Tips，这里收集了 Chrome 的开发工具集和基本使用方法。如果你是一个设计师或开发人员，想获取更新最新的设计和开发资讯，请访问 Chrome 的扩展应用 Muzli 或 Panda。 如果你正在寻找 Firefox 的扩展应用，请看：对于 Web 开发非常有用的 20 个 Firefox 扩展应用。 之前还有一篇发布在 Speckyboy Design Magazine 上的文章是对于 Web 设计师和开发者非常有用的 20 个 Chrome 扩展应用。 原文链接]]></content>
      <categories>
        <category>转载</category>
        <category>好文分享</category>
      </categories>
      <tags>
        <tag>译文</tag>
        <tag>Web Development</tag>
        <tag>Chrome Extensions</tag>
        <tag>Web Designers</tag>
        <tag>Developers</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[20 个交互非常棒的按钮代码]]></title>
    <url>%2Fblog%2F2017%2F06%2F15%2F20-%E4%B8%AA%E4%BA%A4%E4%BA%92%E9%9D%9E%E5%B8%B8%E6%A3%92%E7%9A%84%E6%8C%89%E9%92%AE%E4%BB%A3%E7%A0%81%2F</url>
    <content type="text"><![CDATA[你能想象网页中没有按钮吗？我打赌你不会。在网页中，拥有按钮并不奇怪，这些看似很小、主要以矩形表现（如导航栏，版权信息）的东西，其实是网页 UI 中基础之一。它们不仅使链接看起来更有分量、吸引人和鲜明，而且他们还能提高跳转率和用户体验，使之更方便和直观。这些 CTA （Call-to-action：行为召唤）能帮你获得更多的潜在客户和促进业务的扩展。 HOST 按钮的开发需要注意它的形状、颜色、空间、排版和前景，这些都很重要。前四个主要是依赖于网页的主题，而最后一个则是取决于你需要达成的目标。例如，你可以在用户点击后，等待的时间里在按钮上加入转轮点亮的动画；又或是，加入一些更吸引眼球的动画效果。如此一来，添加动画效果可以使按钮产生的效果最大化。那么，接下来为你介绍这 20 个很棒的按钮代码，它们能使按钮更加丰富，且用户体验超好。 波浪形按钮 作者：Nikolay Talanov 用 Canvas 和 HTML5 制作的粒子状按钮 作者：Ignacio Correia 用 Sass 制作的胶状按钮 作者：François Lesenne 3D 弹出效果的按钮 作者：Ashley Nolan “Material Design” CSS 动画效果的按钮 作者：Jon Brennecke 具有 3D 效果的按钮 作者：drus unlimited 关闭按钮效果 作者：Jonas Badalic 一些时尚的切换效果按钮 作者：Ashley Nolan 纯 CSS3 效果的按钮 作者：Overly Engineered Hover 效果 作者：Deep Jelly 按钮 作者：ayamflow Hover 效果的按钮 作者：James Power Gaming Button With Hover Effect 作者：kaigth 分享按钮 作者：Vincent Durand Flipside 作者：Hakim El Hattab 粒子按钮效果 作者：Timo Hausmann CSS3 按钮示例 作者：Volusion Services 很棒的按钮样式和效果 作者：Mary Lou 创意按钮样式 作者：Mary Lou 3D 动画效果的按钮 作者：Zachary Minner 原文链接]]></content>
      <categories>
        <category>转载</category>
        <category>好文分享</category>
      </categories>
      <tags>
        <tag>译文</tag>
        <tag>button</tag>
        <tag>interactive</tag>
        <tag>web</tag>
      </tags>
  </entry>
</search>